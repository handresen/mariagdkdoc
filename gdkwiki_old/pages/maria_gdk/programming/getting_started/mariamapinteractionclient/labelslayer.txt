======  Labels Layer ======

The labels layer provides display of dynamic layer information.
====  Labels layer interaction ====

Create an interface class (//LabelsLayerViewModel.cs//) for interaction with the label layer, inheriting ViewModelBase. Implement public property access to the map layer, and add an event handler for the map layer //LayerInitialized//event.
<code csharp>
public class LabelsLayerViewModel : ViewModelBase
{
    private IMariaLabelsLayer _labelsLayer;

    public LabelsLayerViewModel(IMariaLabelsLayer labelsLayer )
    {
        _labelsLayer = labelsLayer;
        _labelsLayer.LayerInitialized += OnLabelsLayerInitialized;
    }
    private void OnLabelsLayerInitialized()  {  }
}
</code>

Add properties to access the labels layer visibility and opacity, and refresh the information when the layer has been initialized.
<code csharp>
private void OnLabelsLayerInitialized()
{
    RefreshProperties();
}

public double Opacity
{
    get { return _labelsLayer.Opacity; }
    set
    {
        _labelsLayer.Opacity = value;
        NotifyPropertyChanged(() => Opacity);
    }
}

public bool LabelsLayerVisible
{
    get { return _labelsLayer.Visible; }
    set
    {
        _labelsLayer.Visible = value;
        RefreshProperties();
    }
}

private void RefreshProperties()
{
    NotifyPropertyChanged(() => LabelsLayerVisible);
    NotifyPropertyChanged(() => Opacity);
}
</code>

Create the labels layer and include the //LabelsLayerViewModel// in the declarations and constructor of the main view model (//MariaWindowViewModel//).
<code csharp>
public LabelsLayerViewModel LabelsLayerViewModel { get; set; }
private readonly IMariaLabelsLayer _labelsLayer;
. . .
_labelsLayer = new LabelsLayer(_mapLayer);
LabelsLayerViewModel = new LabelsLayerViewModel(_labelsLayer);
Layers.Add(_labelsLayer);
</code>

Then, add a checkbox and a slider with bindings to the view model properties:
<code xml>
<Slider Grid.Row="0" Width="50"
        Name="sldLabelsOpacity" 
        Minimum="0.0" Maximum="1.0" 
        Value="{Binding LabelsLayerViewModel.Opacity }" 
        IsEnabled="{Binding LabelsLayerViewModel.LabelsLayerVisible}"
        />
</code>

<WRAP center round box>
Running your application, You should now be able to view labels when the selected map type supports it.
</WRAP>

{{maria_gdk:programming:maria_2012_tutorial_html_m65600edd.jpg|Labels at different scales and opacity}}\\ Figure: Labels at different scales and opacity.