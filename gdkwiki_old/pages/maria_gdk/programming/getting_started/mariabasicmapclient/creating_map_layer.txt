===== Step 3: Creating Map Layer with Map Service Connection =====
The map layer is accessed programmatically through the map layer interface, //**IMariaMapLayer**//.

<WRAP center round info>
For this part you will need to include **//TPG.Maria.MapLayer//** NuGet package.
</WRAP>

Create a class (//MapViewModel//) to handle intaractions toward the map layer, and add the following variables and properties:
<code csharp>
private readonly IMariaMapLayer _mapLayer;

public IMariaMapLayer MiniMapLayer { get; set; }
public GeoPos CenterPosition { get; set; }
public double Scale { get; set; }
</code>

Create the MapViewModel constructor, initializing map and minimap event handling:

<code csharp>
public MapViewModel(IMariaMapLayer mapLayer, IMariaMapLayer miniMapLayer)
{
    _mapLayer = mapLayer;
    _mapLayer.LayerInitialized += OnMapLayerInitialized;
    
    MiniMapLayer = miniMapLayer;
    MiniMapLayer.LayerInitialized += OnMiniMapLayerInitialized;
}
</code>

 Add the //LayerInitialized// event handlers for the map and mini map:
<code csharp>
private void OnMapLayerInitialized()
{
    Scale = 50000;
    CenterPosition = new GeoPos(60, 10);

    _mapLayer.ActiveMapTemplate = PreferredMapTemplate();
}
private void OnMiniMapLayerInitialized()
{
    MiniMapLayer.ActiveMapTemplate = PreferredMapTemplate();
}

private MapTemplate PreferredMapTemplate()
{
    var preferred = "WorldMap";
    foreach (var template in _mapLayer.ActiveMapTemplates)
    {
        if (template.Name == preferred)
            return template;
    }
    return _mapLayer.ActiveMapTemplates.Any() ? _mapLayer.ActiveMapTemplates.Last() : null;
}
</code>

 Then, include the MapViewModel in the main interface (//MariaWindowViewModel//).

Declarations:
<code csharp>
public MapViewModel MapViewModel { get; set; }

private IMariaMapLayer _mapLayer;
private MapLayer _miniMapLayer;
</code>

and in the constructor

<code csharp>
IBindingFactory bindingFactory = new BindingFactory();
IEndpointAddressFactory endpointAddressFactory = new EndpointAddressFactory();

var mapCatalogServiceClient  = 
    new MapCatalogServiceClientFactory(bindingFactory, endpointAddressFactory).New("MapCatalogService");
var mapTemplateServiceClient = 
    new MapTemplateServiceClientFactory(bindingFactory, endpointAddressFactory).New("TemplateService");

_mapLayer = new MapLayer(mapCatalogServiceClient, mapTemplateServiceClient);
_miniMapLayer = new MapLayer(mapCatalogServiceClient, mapTemplateServiceClient);

MapViewModel = new MapViewModel(_mapLayer, _miniMapLayer);
Layers.Add(_mapLayer);
</code>

Update MariaUserControl binding
<code xml>
<MariaUserControl:MariaUserControl Name="MariaCtrl"
                                   Layers="{Binding Layers}"
                                   IsMiniMapVisible="True"
                                   IsPanNavigationVisible="True" 
                                   IsScaleBarVisible="True" 
                                   IsRulerVisible="True" 
                                   CenterScale="{Binding MapViewModel.Scale}" 
                                   CenterPosition="{Binding MapViewModel.CenterPosition}" 
                                   MiniMapLayer="{Binding MapViewModel.MiniMapLayer}"     
                                   />
/>
</code>

<WRAP round box>

Running your application, the window area should now include map information and mini map -- and you should be able to navigate the map!
</WRAP>


{{maria_gdk:programming:maria_2012_tutorial_html_109d54ed.png|Map area with map information}}\\ Figure: Map area with map information
