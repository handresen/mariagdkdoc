====== Compiling GDAL and other drivers ======
Several of the Maria projects depend on GDAL which again depends on other libraries. This HOWTO describes how to build these libraries with the correct settings for use in Maria 2012.



===== How to build GDAL =====
GDAL is built with nmake and the nmake.opt file is used to set up the compilation in order to support all the formats required by Maria. The necessary entries for each format will be explained in late sections.

**NB! First, correct MSVC_VER must be set in nmake.opt!!** Visual Studio 2015 is current version. 

Some projects must be compiled prior to building GDAL. Read the following documentation before compiling GDAL.

The following projects are used in GDAL:
  - libiconv
  - ERDAS ECW/JP2 SDK
  - Expat
  - Xerces
  - MrSID
  - SQLite
  - Legacy
  - FYBA (SOSI)
  - PROJ4
  - M6M
  - QM2

===== Download libiconv =====
Information available at:
  * https://www.gnu.org/software/libiconv/
  * http://gnuwin32.sourceforge.net/packages/libiconv.htm
  * http://www.codeproject.com/Articles/302012/How-to-Build-libiconv-with-Microsoft-Visual-Studio describes steps on creating Visual Studio project. The librariers are already available in TFS at \TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\libiconv-1.14. All builds are using \lib\ as output directory.

Download:
  * http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz
  * Unzip

The following section must be defined in GDAL nmake.opt:
  * LIBICONV_DIR = "C:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\libiconv-1.14"
  * LIBICONV_INCLUDE = -I$(LIBICONV_DIR)\include
  * !IFDEF DEBUG
  * LIBICONV_LIBRARY = $(LIBICONV_DIR)\lib\libiconvD.lib
  * !ELSE
  * LIBICONV_LIBRARY = $(LIBICONV_DIR)\lib\libiconv.lib
  * !ENDIF
  * LIBICONV_CFLAGS = -DICONV_CONST=const

===== Download ERDAS ECW/JP2 SDK =====
Information available at:
  * http://www.gdal.org/frmt_jp2ecw.html
  * http://www.hexagongeospatial.com/products/provider-suite/erdas-ecw-jp2-sdk
  * https://trac.osgeo.org/gdal/wiki/ECW

Download:
  * http://download.hexagongeospatial.com/download-portal
  * Select ECW Products
  * Select ERDAS ECW/JPEG2000 SDK
  * Unzip

The following section must be defined in GDAL nmake.opt:
  * ECWDIR  = 	"C:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\ERDAS ECW JPEG 2000 SDK 5.3.0"
  * !IFDEF WIN64
  * ECWLIB  =  $(ECWDIR)\lib\vc120\x64\NCSEcw.lib
  * !ELSE
  * ECWLIB  =  $(ECWDIR)\lib\vc120\win32\NCSEcw.lib
  * !ENDIF



===== Download Expat =====
Information available at:
  * https://en.wikipedia.org/wiki/Expat_(library)
  * https://sourceforge.net/projects/expat/

The following section must be defined in GDAL nmake.opt:
  * !IFNDEF WIN64
  * EXPAT_DIR = "C:\gdalbuild\Expat 2.1.0"
  * EXPAT_INCLUDE = -I$(EXPAT_DIR)/source/lib
  * EXPAT_LIB = $(EXPAT_DIR)/bin/libexpat.lib
  * !ENDIF

Download contains both expat.sln and compiled libraries.

===== Building Xerces =====
Information available at:
  * http://xerces.apache.org/mirrors.cgi

**MUST BE COMPILED USING CORRECT Visual Studio!** The files might be checked out from TFS prior to compiling.

Download:
  * Select Xerces C++ version
  * Download

Build:
  * **Open projects\Win32\VC12\xerces-all.sln in VS2015**
  * NB! For some reason \VC14\ fails to load so VC12 is used instead. Accept upgrade questions. All vcxproj files must be checked out first. **It might also be necessary to turn off read-only flags on files prior to compilation.**
  * Build project **XercesLib** in required version (win32, win64, debug, release)
  * Output in build\win32\debug\ etc.

The following section must be defined in GDAL nmake.opt:
  * !IFNDEF WIN64
  * XERCES_DIR =	C:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\xerces-c-3.1.1
  * #XERCES_INCLUDE = -I$(XERCES_DIR)/include -I$(XERCES_DIR)/include/xercesc
  * XERCES_INCLUDE = -I$(XERCES_DIR)/src -I$(XERCES_DIR)/src/xercesc
  * !IFNDEF DEBUG
  * XERCES_LIB = $(XERCES_DIR)\Build\Win32\VC12\Release\xerces-c_3.lib
  * !ELSE
  * XERCES_LIB = $(XERCES_DIR)\Build\Win32\VC12\Debug\xerces-c_3D.lib
  * !ENDIF
  * !ENDIF


===== Download MrSID =====
Information available at:
  * https://trac.osgeo.org/gdal/wiki/MrSID
  * https://www.lizardtech.com/developer/overview

Download:
  * Select newest version (9.5.1.4427)
  * Download and unzip win32 and win64.

The following section must be defined in GDAL nmake.opt:
  * !IFDEF WIN64
  * MRSID_DIR =	C:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\MrSid\MrSID_DSDK-9.1.0.4045-win64-vc12
  * !ELSE
  * MRSID_DIR =	C:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\MrSid\MrSID_DSDK-9.1.0.4045-win32-vc12
  * !ENDIF
  * MRSID_JP2 = YES


===== Building SQLite =====
Information available at:
  * https://www.sqlite.org/download.html
  * https://www.sqlite.org/howtocompile.html

**MUST BE COMPILED USING CORRECT Visual Studio!**

Download:
  * Select amalgamation version f.ex **sqlite-amalgamation-3140100.zip** (necessary to get sqlite3.h)
  * Unzip to \TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\sqlite
  * Select **sqlite-dll-win32-x86-3140100.zip** (necessary to get sqlite3.def and sqlite3.dll)
  * Unzip to \TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\sqlite\x86
  * Select **sqlite-dll-win64-x64-3140100.zip** (necessary to get sqlite3.def and sqlite3.dll)
  * Unzip to \TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\sqlite\x64

Build:
  * Start Developer Command Prompt as **Administrator** in C:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\sqlite
  * Run **C:\Program Files (x86)\Microsoft Visual Studio 12.0\vc\vcvarsall" x86** for 32 bit library.
  * Run **C:\Program Files (x86)\Microsoft Visual Studio 12.0\vc\vcvarsall" amd64** for 64 bit library.
  * Run "**lib /def:x86\sqlite3.def /out:x86\sqlite3.lib**" from developer command prompt to create library from dll.
  * The batch files can be used to extract the lib files.
  * **It might also be necessary to turn off read-only flags on files prior to compilation.**
  * NOTE: sometimes the command prompt fails to set target x86 or amd64. It seems to be caused by lost administrator rights. Restarting command prompt will resolve this issue.

The following section must be defined in GDAL nmake.opt:
  * SQLITE_INC=-IC:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\sqlite\
  * !IFDEF WIN64
  * SQLITE_LIB=C:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\sqlite\x64\sqlite3.lib
  * !ELSE
  * SQLITE_LIB=C:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\sqlite\x86\sqlite3.lib
  * !ENDIF


===== Building SOSI (FYBA) =====
Information available at:
  * http://labs.kartverket.no/sos/
  * https://no.wikipedia.org/wiki/SOSI-formatet

**MUST BE COMPILED USING CORRECT Visual Studio!**

Download:
  * Download from https://github.com/kartverket/fyba/. Select branch "win" which includes Visual Studio projects.
  * Minor changes must be done to the UT, GM and FYBA projects.

UT project:
  * Open using VS, confirm upgrade question if necessary.
  * The PostBuildEvent might fail due to the source path. Prevent this by adding quotes: <PostBuildEvent><Command>copy **"$(TargetPath)"** ..\..\Lib\$(ProjectName)$(TargetExt)</Command>/PostBuildEvent>
  * FYBA fails to read sosi files saved using UTF8 encoding. Add necessary code in UT1.cpp to fix this.

GM project:
  * Open using VS, confirm upgrade question if necessary.
  * Change <OutputFile>..\..\Lib\$(ProjectName).lib to  **<OutputFile>$(SolutionDir)$(Configuration)\$(ProjectName)$(TargetExt)</OutputFile>** to prevent building errors.
  * For **release** configuration, add post build step: **<PostBuildEvent> <Command>copy "$(TargetPath)" ..\..\Lib\$(ProjectName)$(TargetExt)</Command></PostBuildEvent>**
  * For **debug** configuration, add post build step: **<PostBuildEvent> <Command>copy "$(TargetPath)" ..\..\Lib\$(ProjectName)D$(TargetExt)</Command></PostBuildEvent>**
    
FYBA project:
  * Open using VS, confirm upgrade question if necessary. 
  * Change <OutputFile>..\..\Lib\$(ProjectName).lib to **</OutputFile> to <OutputFile>$(SolutionDir)$(Configuration)\$(ProjectName)$(TargetExt)</OutputFile>** to prevent building errors.
  * The PostBuildEvent might fail due to the source path. Prevent this by adding quotes <PostBuildEvent>      <Command>copy **"$(TargetPath)"** ..\..\Lib\$(ProjectName)$(TargetExt)</Command></PostBuildEvent>

Build:
  * Build FYBA's three projects (UT, GM, FYBA) using Visual Studio. 
  * Select configurations **SosiVis Release** and **SosiVis Debug**.
  * After rebuilding SosiVis Release and SosiVis Debug, the LIB folder should contain the following files: UT.LIB, UTD.LIB, GM.LIB, GMD.LIB, FYBA.LIB, FYBAD.LIB
  * This LIB folder must be referenced when building GDAL.

The following section must be defined in GDAL nmake.opt:
  * SOSI_ENABLED = YES
  * SOSI_INC_DIR = C/TFS/MARIA/Branches/Development/MariaNG1.0/Native/ThirdParty/fyba/include
  * !IFNDEF DEBUG
  * SOSI_LIBS = C/TFS/MARIA/Branches/Development/MariaNG1.0/Native/ThirdParty/fyba/Lib/FYBA.lib C/TFS/MARIA/Branches/Development/MariaNG1.0/Native/ThirdParty/fyba/Lib/GM.lib C/TFS/MARIA/Branches/Development/MariaNG1.0/Native/ThirdParty/fyba/Lib/UT.lib
  * !ELSE
  * SOSI_LIBS = C/TFS/MARIA/Branches/Development/MariaNG1.0/Native/ThirdParty/fyba/Lib/FYBAD.lib C/TFS/MARIA/Branches/Development/MariaNG1.0/Native/ThirdParty/fyba/Lib/GMD.lib C/TFS/MARIA/Branches/Development/MariaNG1.0/Native/ThirdParty/fyba/Lib/UTD.lib
  * !ENDIF
===== Building PROJ4 =====
Information available at:
  * Wiki at https://github.com/OSGeo/proj.4/wiki

Download:
  * Sourcecode at https://github.com/OSGeo/proj.4
  * Select Master branch
  * Download and unzip

The following section must be defined in **proj.4-master\nmake.opt**:
  * !IFNDEF INSTDIR
  * INSTDIR=\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\proj.4-master\build
  * !ENDIF
  * 
  * !IFDEF WIN32
  * !IFNDEF DEBUG
  * INSTDIR=\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\proj.4-master\build\win32\release
  * !ELSE 
  * INSTDIR=\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\proj.4-master\build\win32\debug
  * !ENDIF
  * !ENDIF
  * !IFDEF WIN64
  * !IFNDEF DEBUG 
  * INSTDIR=\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\proj.4-master\build\win64\release
  * !ELSE
  * INSTDIR=\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\proj.4-master\build\win64\debug 
  * !ENDIF   
  * !ENDIF

  * **Change OPTFLAGS for debugging (line 27)**
  * /MD --> /MDd

  *** Add the following:**
  * !IFDEF DEBUG    
  * COPY_PDB_FILES=YES
  * !ENDIF

In src\makefile.vc:
  *** At the end add:**
  * !IFDEF COPY_PDB_FILES 
  * copy *.pdb $(INSTDIR)\bin
  * !ENDIF

  * **Under the "install: all" section, add:**
  * copy *.exp $(INSTDIR)\lib

For simplicity, the following batch files have been created to build different versions of PROJ4 (Visdual Studio 2013):
  *** set_win32.bat:**
  * "C:\Program Files (x86)\Microsoft Visual Studio 12.0\vc\vcvarsall" x86
  *** set_win64.bat:**
  * "C:\Program Files (x86)\Microsoft Visual Studio 12.0\vc\vcvarsall" amd64
  * **executebuild.bat:**
  * IF %1%==WIN32 (
  * nmake -f makefile.vc MSVC_VER=1800 WIN32=1
  * nmake -f makefile.vc install-all MSVC_VER=1800 WIN32=1
  * )ELSE IF %1%==WIN64 (
  * nmake -f makefile.vc MSVC_VER=1800 WIN64=1
  * nmake -f makefile.vc install-all MSVC_VER=1800 WIN64=1
  * )
  * **executebuild_debug.bat:**
  * IF %1%==WIN32 (
  * nmake -f makefile.vc MSVC_VER=1800 DEBUG=1 WIN32=1
  * nmake -f makefile.vc install-all MSVC_VER=1800 DEBUG=1 WIN32=1
  * )ELSE IF %1%==WIN64 (
  * nmake -f makefile.vc MSVC_VER=1800 DEBUG=1 WIN64=1
  * nmake -f makefile.vc install-all MSVC_VER=1800 DEBUG=1 WIN64=1
  * )
  * **rebuild_win32.bat:**
  * call set_win32.bat
  * nmake -f makefile.vc clean
  * call executebuild.bat WIN32
  * **rebuild_win64.bat**
  * call set_win64.bat
  * nmake -f makefile.vc clean
  * call executebuild.bat WIN64
  * **rebuilddebug_win32.bat:**
  * call set_win32.bat
  * nmake -f makefile.vc clean
  * call executebuild_debug.bat WIN32
  * **rebuilddebug_win64.bat:**
  * call set_win64.bat
  * nmake -f makefile.vc clean
  * call executebuild_debug.bat WIN64
  * **rebuild_all.bat:**
  * call rebuild_win32.bat
  * call rebuild_win64.bat
  * call rebuilddebug_win32.bat
  * call rebuilddebug_win64.bat

**NB! These files are also available for Visual Studio 2015.**

Build:
  * **Run "Developer Command Prompt for VS2015" as administrator (VERY IMPORTANT).**
  * From directory proj.4-master, run **rebuild_all.bat**.
  * **It might also be necessary to turn off read-only flags on files prior to compilation.**
  * All versions should be found under directory **proj.4-master\build**.

Update dependency files to \TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\gdal-2.1.1\dependencies using the batch file **\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\gdal-2.1.1\get_dllfiles**. 
==== QM2 Support ====

The QM2 driver is compiled into the gdal core, so you need to make a few changes in the source tree in order to make this work. The QM2 Driver is also dependent on some of the Maria Native libraries, so you need to build them first.

Copy QM2 source files:
  * Copy folder \MariaNG1.0\Native\drivers\**gdal_qm2** to folder \native\ThirdParty\gdal-2.1.1\frmts\**qm2**


Add **DFRMT_qm2** to GDAL **native\ThirdParty\gdal-2.1.1\frmts\makefile.vc**:
  * EXTRAFLAGS = /*existing parameters*/ -DFRMT_qm2


Add the following to **gdal-2.1.1\frmts\gdalallregister.cpp**:
  * #ifdef FRMT_qm2
  * GDALRegister_QM2();
  * #endif

Add the following to **gdal-2.1.1\gcore\gdal_frmts.h**:
  * void CPL_DLL GDALRegister_QM2(void);

Verify the content in **gdal-2.1.1\frmst\qm2\makefile.vc**:
  * EXTRAFLAGS must point to the **native\legacy** folder. If not, GDAL will not compile.




===== Legacy code =====
The following section must be defined in GDAL nmake.opt so that ith points to legacy relative to the gdal_build folder:
  * !IFDEF WIN64
  * ADD_LIBS	= /LIBPATH:..\..\legacy\lib\x64
  * !ELSE
  * ADD_LIBS	= /LIBPATH:..\..\legacy\lib\Win32
  * !ENDIF

The following libraries must be pre-compiled using Visual Studio 2015:
  * native\legacy\Compression
  * native\legacy\jpeg6b
  * native\legacy\libpng
  * native\legacy\libgeotiff
  * native\legacy\ImageFormats

**Note: The solution \legacy\BuildingGDALDependencies\BuildingGDALDependencies.sln can vbe used to build these projects.**
===== Building GDAL =====
Information available at:
  * http://www.gdal.org

Download:
  * https://trac.osgeo.org/gdal/wiki/DownloadSource
  * http://download.osgeo.org/gdal/2.1.1/gdal211.zip
  * Unzip


The following changes must be done in GDAL's **nmake.opt** (in addition to changes required by other libraries described above): 
  * Set MSVC_VER=1800

  * **Replace GDAL_HOME = "C:\warmerda\bld" with**
  * !IFNDEF DEBUG
  * GDAL_HOME = "C:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\gdal-2.1.1\bld"  
  * !ELSE    
  * GDAL_HOME = "C:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\gdal-2.1.1\blddebug"
  * !ENDIF

  * Replace /MD with /MDd in OPTFLAGS for DEBUG (around line 132 and 138).
 
  * **Add the following:**
  * !IFDEF DEBUG
  * COPY_PDB_FILES=YES   
  * !ENDIF

The following changes must be done in makefile.vc:
  * **After the line "copy frmts\vrt\*.h $(INCDIR)", add the following (necessary for debugging)**:
  * !IFDEF COPY_PDB_FILES	
  * copy *.pdb $(BINDIR)
  * copy apps\*.pdb $(BINDIR) 
  * !ENDIF

For simplicity, the following batch files have been created to build different versions of GDAL:
  * **Build.bat:**
  * nmake -f makefile.vc MSVC_VER=1800
  * nmake -f makefile.vc devinstall MSVC_VER=1800

  * **Build_debug_win32.bat:**
  * nmake -f makefile.vc MSVC_VER=1800 DEBUG=1
  * nmake -f makefile.vc devinstall MSVC_VER=1800 DEBUG=1

  * **Rebuild_win32.bat:**
  * nmake -f makefile.vc clean
  * call build.bat

  * **Rebuilddebug_win32.bat:**
  * nmake -f makefile.vc clean
  * call build_debug.bat

The batch file **rebuild_all** builds all configurations. Resulting binaries are found in **gdal-2.1.1\bld\bin** and **gdal-2.1.1\blddebug\bin**.

Note: 
  * **Developer command Prompt must be run as Administrator!!**
  * If building fails with weird error message, restart developer command prompt. It seems like it looses the administrator privileges.
  * NOTE: Building GDAL might fail if the source directory requires quotes. For example, directory "Third party" might cause errors. Also, delete all visual studio files if there has been any changes to the project files before running makegdal_gen.bat to re-generate studio project.
  * Building using Visual Studio does not honor the output directories specified in nmake.opt so this is not recommended!


===== Debugging GDAL =====
**Preparing**
  * Define the **GDAL_DATA** environmental variable to point to the data directory. If the source is compiled in C:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\gdal-2.1.1, the GDAL_DATA  must be set to C:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\gdal-2.1.1\bld\data.
  * Check the **GDAL_DATA** by going to command prompt and type **set**. If not correct value, change in **Windows Environment Variables**.
  * Run **C:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\gdal-2.1.1\makegdal_gen.bat 10.00 32 > makegdal10.vcproj** from developer command prompt to create an updated Visual Studio project. 
  * Code must already have been build using build_debug.bat or rebuild_debug.bat (building using Visual Studio fails.
  * Open **makegdal10.vcproj** in Visual Studio
  * Confirm upgrading.
  
  
* **Set debugging setup (example):**
  * //Debugging-Command// = C:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\gdal-2.1.1\blddebug\bin\ogrinfo.exe 
  * //Debugging-Command arguments// = C:\TFS\MARIA\Branches\Development\MariaNG1.0\Native\ThirdParty\gdal-2.1.1\blddebug\bin\kautokeino.sos 
  * Debugging using F5 should work (ignore out-of-date-warning).


===== Building M6M =====
GDAL must be build prior to building M6M which is located in \TFS\MARIA\Branches\Development\MariaNG1.0\Native\drivers\M6M.

The following files must be present in the **\native\legacy\** folder:
  * **CommonProperties.props**
  * **ThirdPartyPaths.props**. In this file, make sure that the defined **AdditionalIncludeDirectories** is valid. 

The following projects must be present:
  * native\ThirdParty\protobuf-2.6.1
  * native\ThirdParty\Clipper_ver4.8.4
  * native\MUtil
  * native\legacy\libtiff
  * native\legacy\TPGraphics
  * native\legacy\Compression
  * native\legacy\MapStyling
  * native\legacy\rapidxml
  * native\legacy\ViewportFactory

The following libraries must be pre-compiled using Visual Studio 2015:
  * native\legacy\MapFeatureCore. 
  * native\MViewport
  * native\legacy\TPMisc
  * native\legacy\zlib
  * native\legacy\BasicGeoTypes

Building M6M:
  * Make sure that the project's **Include Directories** and **Library Directories** are valid. 
  * Build
  * Binaries available in \ThirdParty\gdal-2.1.1\rel\gdalplugins\.




