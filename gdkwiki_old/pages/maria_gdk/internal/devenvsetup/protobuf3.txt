===== Use and setup of google protobuf3 =====
Protobuf 3 for Maria GDK uses a new folder structure compared to the old protobuf2.x-structure. The root path for all projects and proto files in Maria GDK solution is: **$(SolutionDir)Libraries\TPG.Proto**. Protobuf3 is used in Maria GDK 2.2 and newer.

The protobuf solution is based on these assumptions:
  * The root dir is the same for all protobuf projects sharing messages [[https://developers.google.com/protocol-buffers/docs/proto3#importing-definitions|google recommendation]]. 
  * The compiler **protoc.exe** is placed in root dir or installed with nuget Google.Protobuf.Tools in <solution root>/packages/Google.Protobuf.Tools.<version>/tools/windows_x86
  * Proto-projects are placed directly under root, for instance [root]/TPG.Proto3.Geo 
  * Any files with extension **.proto** will be compiled using protoc to produce **.cs** files. After this they will be compiled into the project assembly.
  * When referencing protofiles using //import//, fully qualified names must always be used, even if including files from the same project ([[https://developers.google.com/protocol-buffers/docs/proto3#importing-definitions|google recommendation]]).
  * For CS-projects, only protobuf3 is allowed. The first line in the proto files must be **syntax="proto3";** 

==== CS project setup ====
Existing project **TPG.Proto3.Map** can be used as a template/example for setting up new projects.
=== Reference google protobuf nuget ===
Add reference to nuget package Google.Protobuf, this is available in  the TPG protobuf repository. If protoc compiler is required, reference nuget Google.Protobuf.Tools and use or copy the protoc compiler from this directory: <solution dir>\packages\Google.Protobuf.Tools.3.1.0\tools\windows_x86\protoc.exe (or newer version as required)
=== Prebuild step ===
Invokes protoc-compiler for all proto files in project directory and places them in subfolder //generated_cs//. This can be added in project settings for prebuild event. Example below is used in TPG.Proto3.Map.
<code xml>
 <PropertyGroup>
    <PreBuildEvent>
      cd "$(ProjectDir).."
      protoc.exe TPG.Proto3.Map\*.proto --csharp_out TPG.Proto3.Map\generated_cs
   </PreBuildEvent>
  </PropertyGroup>
</code>
Note:
  * Use the x86-version of protoc.exe. This includes wildcard expansion unlike the x64 version of protoc
  * Windows style paths with spaces and drive letters do not work well as arguments to protoc.exe. Instead, use "cd" to parent dir of proto projects and use relative, short paths without drive letters and spaces (as in example above)
=== Wildcard based compilation ===
Add a custom target to the build at the bottom of .csproj-file
<code xml>
<Target Name="BeforeCompile">
  <ItemGroup>
    <Compile Include="generated_cs\*.cs" KeepDuplicates="false" />
  </ItemGroup>
</Target>
</code>
In addition, add files to the project tree for browsing/intellisense. Note that the files will not appear until after the cs-files are generated and the project is reloaded.
<code xml>
<ItemGroup>
  <Compile Include="generated_cs\*.cs" />
</ItemGroup>
</code>
For new projects, add the folder "generated_cs" from Visual Studio to ensure that it is created from the source control. A readme.txt should be placed in the folder and added to source control to ensure creation of the target folder when getting source.
=== Adding new proto files ===
After the project is set up, adding new proto-files is very simple. Just save a file in the wanted project folder with the extension ".proto" and add it to the project. Use "Content" type to ensure appropriate rebuild. Note that evenif the file is not added to the project, it will be built automatically. Adding it to the project allows easy browsing and source control integration. 


