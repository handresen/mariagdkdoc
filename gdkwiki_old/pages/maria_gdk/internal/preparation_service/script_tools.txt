====== Scripts ======

This article will explain the different parts of a script. Subsections will refer to the numbers in the image below.

{{ :maria_gdk:internal:preparation_service:sample_script.png?direct |}}

===== Item 1 =====
The resultsstep attribute indicates to the [[maria_gdk:internal:preparation_service:execution_engine|Execution Engine]] which script to get the final result of the script from. The value refers to the id of the script tool as described in [[maria_gdk:internal:preparation_service:script_tools#Item 3|Item 3]].

===== Item 2 =====
The conditions are used when determining if a script is compatible with a given set of input data. These conditions are used when [[http://support.teleplanglobe.com/MariaGDKDoc/html/3654160D.htm|IMariaMapPreparationService.GetAvailableScriptDefinitions]] is called.

Different types of conditions are available. What is shown here are conditions based on input file extensions and filenames. The first condition dictates that if input data contains files with any of the extensions .ecw, .toc, .tif, .jpg, .sid or .ntf this condition is met. 

The following two conditions says that input data containing files named toc.xml or a.toc are eligible. 

There is also a way of determining how the list of conditions should be evaluated. In this case if any of the conditions are met, the script will be determind to be elegible for the input data.

===== Item 3 =====
Each script tool has a step attribute that has to be unique. This step id is used throughout the system for identification of each step. The primary usage is referring to results from one step in another step.

The id, although being numeric, is not used for sorting the steps. The steps are executed in the order they are in the xml file.

===== Item 4 =====
The commandlineparam attribute can be used to get parameters to the script tool. There are different forms of using this attribute.

  - In this example various parameters are passed in a string using the param=paramValue form. The parameters can then be retrived in the tool code using TPG.GeoFramework.MapPreparationService.Utilities.CommandLineParams class
  - It can be a static string that is used directly as command line arguments to an external command line tool.
  - It can also be command line arguments with some dynamic elements. This is further explained under step 6.

===== Item 5 =====
All script tools can make a result from their exeuction available for steps further on in the execution pipeline. In this example we see that the //JsonResultsPackager// step uses results from the script tool with id 1 ie. the //GdalOgrInfo// tool. 
This functionality is not provided autmatically by the execution engine, but has to be done from the code in each prepare tool. The developer can use the **TPG.GeoFramework.MapPreparationService.Utilities.ParameterUtilities** A In the script itself the developer can use the parameterkey attribute for locating the value.

===== Item 6 =====
In this example of commandlineparam we see the use of value substitution from results to the commandlineparam. This is accomplished by using curly braces in the commandline string. 

===== Item 7 =====
Parameters are meant to be manipulated by the user starting a preparation job. The value of the parameter is set at when starting the script and will not change based on values from execution of script steps.
Each parameter describes its purpose and possible values. When the script is obtained using [[http://support.teleplanglobe.com/MariaGDKDoc/html/3654160D.htm|GetAvailableScriptDefinitions]] the service will analyze the data and provide default values for parameters where this is possible.

